//{{ .Type | ToTitle}}Slice cast element value into {{ .Type}}
func (elt *Element) {{ .Type | ToTitle}}Slice(defaultValue ...[]{{ .Type}}) ([]{{ .Type}}, error) {
	defValue := func() *[]{{ .Type}} {
		if len(defaultValue) == 0 {
			return nil
		}
		return &defaultValue[0]
	}
	def := defValue()
	if elt.Value == nil {
		if def == nil {
			var v []{{ .Type }}
			return v, NewWrongPathError(elt.Path)
		}
		return *def, nil
	}
	switch v := elt.Value.(type) {
	case []interface{}:
		return {{ .Type}}CastInterfaceType(v, def)
	case GSlice:
		return {{ .Type}}CastGSliceType(v, def)
	default:
		return nil, NewWrongTypeError("[]{{ .Type }}", elt.Value)
	}
}

func {{ .Type}}CastInterfaceType(list []interface{}, def *[]{{ .Type}}) ([]{{ .Type}}, error){
	var res []{{ .Type}}
	for _, e := range list{
		v, ok := e.({{ .Type }})
		if !ok {
			if def == nil{
				return nil, NewWrongTypeError("{{ .Type }}", e)
			}
			return *def, nil
		}
		res = append(res, v)
	}
	return res, nil
}

func {{ .Type}}CastGSliceType(list GSlice, def *[]{{ .Type}}) ([]{{ .Type}}, error){
	var res []{{ .Type}}
	for _, e := range list{
		v, ok := e.({{ .Type }})
		if !ok {
			if def == nil{
				return nil, NewWrongTypeError("{{ .Type }}", e)
			}
			return *def, nil
		}
		res = append(res, v)
	}
	return res, nil
}
