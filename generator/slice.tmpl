//{{ .Type | ToTitle}}Slice cast element value into {{ .Type}}
func (elt *Element) {{ .Type | ToTitle}}Slice(defaultValue ...[]{{ .Type}}) ([]{{ .Type}}, error) {
	defValue := func() *[]{{ .Type}} {
		if len(defaultValue) == 0 {
			return nil
		}
		return &defaultValue[0]
	}
	def := defValue()
	if elt.Value == nil {
		if def == nil {
			var v []{{ .Type }}
			return v, NewWrongPathError(elt.Path)
		}
		return *def, nil
	}
	list, ok := elt.Value.([]interface{})
	if !ok {
		if def == nil{
			return nil, NewWrongTypeError("[]{{ .Type }}", elt.Value)
		}
		return *def, nil
	}
	var res []{{ .Type}}
	for _, e := range list{
		v, ok := e.({{ .Type }})
		if !ok {
			if def == nil{
				return nil, NewWrongTypeError("{{ .Type }}", e)
			}
			return *def, nil
		}
		res = append(res, v)

	}
	return res, nil
}
